Scope:

Question:
	(function() {
	   var a = b = 5;
	})();
	console.log(b);
	
Answer:
	5
Reason:
	Here 'b' is global variable, because while declar there is no var.
----------------------------------------------------------------------
Question: Create “native” methods
	Define a repeatify function on the String object. The function accepts an integer that specifies how many times the string has to be repeated. The function returns the string repeated the number of times specified. For example:
	console.log('hello'.repeatify(3));
	Should print hellohellohello.
	
Answer:
	A possible implementation is shown below:
	String.prototype.repeatify = String.prototype.repeatify || function(times) {
	   var str = '';

	   for (var i = 0; i < times; i++) {
		  str += this;
	   }

	   return str;
	};
----------------------------------------------------------------------
Question : Hoisting
	What's the result of executing this code and why.
	function test() {
	   console.log(a);
	   console.log(foo());
	   
	   var a = 1;
	   function foo() {
		  return 2;
	   }
	}
	test();
Answer:
	The result of this code is undefined and 2.
Reason:
	Hoisting is the JavaScript interpreter’s action of moving all variable and function declarations to the top of the current scope. However, only the actual declarations are hoisted. Any assignments are left where they are.
----------------------------------------------------------------------
Question: How this works in JavaScript
What is the result of the following code? Explain your answer.
	var fullname = 'John Doe';
	var obj = {
	   fullname: 'Colin Ihrig',
	   prop: {
		  fullname: 'Aurelio De Rosa',
		  getFullname: function() {
			 return this.fullname;
		  }
	   }
	};
	console.log(obj.prop.getFullname());
	var test = obj.prop.getFullname;
	console.log(test());
	//console.log(test.call(obj));
Answer:
The code prints Aurelio De Rosa and John Doe.